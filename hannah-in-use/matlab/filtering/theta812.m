function y = theta812(x)
%FILTER812 Filters input x and returns output y.

% MATLAB Code
% Generated by MATLAB(R) 9.0 and the DSP System Toolbox 9.2.
% Generated on: 10-Nov-2016 15:48:57

%#codegen

% To generate C/C++ code from this function use the codegen command. Type
% 'help codegen' for more information.

persistent Hd;

if isempty(Hd)

    % The following code was used to design the filter coefficients:
    % % FIR Window Bandpass filter designed using the FIR1 function.
    %
    % % All frequency values are in Hz.
    % Fs = 2000;  % Sampling Frequency
    %
    % N    = 200;      % Order
    % Fc1  = 8;        % First Cutoff Frequency
    % Fc2  = 12;       % Second Cutoff Frequency
    % flag = 'scale';  % Sampling Flag
    % % Create the window vector for the design algorithm.
    % win = blackman(N+1);
    %
    % % Calculate the coefficients using the FIR1 function.
    % b  = fir1(N, [Fc1 Fc2]/(Fs/2), 'bandpass', win, flag);

    Hd = dsp.FIRFilter( ...
        'Numerator', [0 -1.81418407322353e-06 -7.26338737704458e-06 ...
        -1.63527089334085e-05 -2.90803566672688e-05 -4.54369449693971e-05 ...
        -6.54045374979938e-05 -8.89554464543804e-05 -0.000116050803345806 ...
        -0.000146638919883467 -0.000180653461116103 -0.000218011456130418 ...
        -0.000258611174622907 -0.000302329900329167 -0.000349021634655386 ...
        -0.00039851476586417 -0.000450609740798284 -0.000505076777360162 ...
        -0.000561653656784747 -0.000620043635134962 -0.000679913513403895 ...
        -0.00074089190512055 -0.000802567739426498 -0.000864489036222758 ...
        -0.000926161988188042 -0.000987050382253928 -0.00104657539050628 ...
        -0.00110411575748646 -0.00115900840751544 -0.00121054949198767 ...
        -0.0012579958926111 -0.00130056719234133 -0.00133744812130853 ...
        -0.00136779148040734 -0.00139072154045448 -0.00140533790996118 ...
        -0.00141071985966419 -0.00140593108705613 -0.00139002489930147 ...
        -0.00136204978816536 -0.0013210553659666 -0.00126609862713839 ...
        -0.0011962504957873 -0.00111060261572445 -0.00100827433584442 ...
        -0.000888419840485757 -0.000750235371557733 -0.000592966486792738 ...
        -0.000415915296512522 -0.000218447619803264 0 0.000239913481097667 ...
        0.00050169465080843 0.000785655014897933 0.00109200990748081 ...
        0.00142087307867039 0.0017722517749697 0.00214604236470214 ...
        0.0025420265575876 0.0029598682639003 0.0033991111345255 ...
        0.00385917681869287 0.00433936397123935 0.00483884803598209 ...
        0.00535668182620284 0.00589179691740544 0.00644300586145286 ...
        0.00700900522497064 0.00758837944857005 0.00817960551705019 ...
        0.0087810584243365 0.00939101741055876 0.0100076729424182 ...
        0.0106291344018946 0.0112534384424534 0.0118785579662802 ...
        0.0125024116707462 0.01312287410734 0.01373778619173 0.0143449660994961 ...
        0.0149422204784174 0.0155273559050644 0.0160981905108504 ...
        0.0166525657006643 0.0171883578857662 0.0177034901517879 ...
        0.0181959437824516 0.0186637695600138 0.0191050987644491 ...
        0.0195181537950131 0.0199012583400487 0.0202528470237126 ...
        0.0205714744616778 0.0208558236617915 0.0211047137100965 ...
        0.0213171066875349 0.0214921137680011 0.021629000454154 ...
        0.021727190913492 0.0217862713835923 0.0218059926220621 ...
        0.0217862713835923 0.021727190913492 0.021629000454154 ...
        0.0214921137680011 0.0213171066875349 0.0211047137100965 ...
        0.0208558236617915 0.0205714744616778 0.0202528470237126 ...
        0.0199012583400487 0.0195181537950131 0.0191050987644491 ...
        0.0186637695600138 0.0181959437824516 0.0177034901517879 ...
        0.0171883578857662 0.0166525657006643 0.0160981905108504 ...
        0.0155273559050644 0.0149422204784174 0.0143449660994961 ...
        0.01373778619173 0.01312287410734 0.0125024116707462 0.0118785579662802 ...
        0.0112534384424534 0.0106291344018946 0.0100076729424182 ...
        0.00939101741055876 0.0087810584243365 0.00817960551705019 ...
        0.00758837944857005 0.00700900522497064 0.00644300586145286 ...
        0.00589179691740544 0.00535668182620284 0.00483884803598209 ...
        0.00433936397123935 0.00385917681869287 0.0033991111345255 ...
        0.0029598682639003 0.0025420265575876 0.00214604236470214 ...
        0.0017722517749697 0.00142087307867039 0.00109200990748081 ...
        0.000785655014897933 0.00050169465080843 0.000239913481097667 0 ...
        -0.000218447619803264 -0.000415915296512522 -0.000592966486792738 ...
        -0.000750235371557733 -0.000888419840485757 -0.00100827433584442 ...
        -0.00111060261572445 -0.0011962504957873 -0.00126609862713839 ...
        -0.0013210553659666 -0.00136204978816536 -0.00139002489930147 ...
        -0.00140593108705613 -0.00141071985966419 -0.00140533790996118 ...
        -0.00139072154045448 -0.00136779148040734 -0.00133744812130853 ...
        -0.00130056719234133 -0.0012579958926111 -0.00121054949198767 ...
        -0.00115900840751544 -0.00110411575748646 -0.00104657539050628 ...
        -0.000987050382253928 -0.000926161988188042 -0.000864489036222758 ...
        -0.000802567739426498 -0.00074089190512055 -0.000679913513403895 ...
        -0.000620043635134962 -0.000561653656784747 -0.000505076777360162 ...
        -0.000450609740798284 -0.00039851476586417 -0.000349021634655386 ...
        -0.000302329900329167 -0.000258611174622907 -0.000218011456130418 ...
        -0.000180653461116103 -0.000146638919883467 -0.000116050803345806 ...
        -8.89554464543804e-05 -6.54045374979938e-05 -4.54369449693971e-05 ...
        -2.90803566672688e-05 -1.63527089334085e-05 -7.26338737704458e-06 ...
        -1.81418407322353e-06 0]);
end

delay = mean(grpdelay(Hd));
y = step(Hd,(x));
y(1:delay) = [];

% [EOF]
